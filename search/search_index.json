{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Rusty Web is a lightweight web framework for rust developers.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>[dependencies]\nrusty-web = \"0.0.2\"\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>use rusty_web::paths::{Path, Paths};\nuse rusty_web::request::Request;\nuse rusty_web::response::Response;\nuse rusty_web::server::run_server;\nuse rusty_web::status::Status;\n\nfn home(request: Request, mut response: Response) {\n    response.html(Status::Ok, \"Home Page\".to_string()).send();\n}\n\nfn about(request: Request, mut response: Response) {\n    response.html(Status::Ok, \"About Us\".to_string()).send();\n}\n\nfn main() {\n    let paths: Paths = vec![\n        Path::new(\"/\", home),\n        Path::new(\"/about/\", about),\n    ];\n\n    run_server(\"0.0.0.0:8080\", paths);\n}\n</code></pre>"},{"location":"#handling-file-upload","title":"Handling file Upload","text":"<p>Handling file is much easier in Rusty Web.</p> <pre><code>fn upload(mut request: Request, mut response: Response) {\n    if request.method == \"POST\" {\n        let files = request.files();\n        println!(\"FILES {:?}\", files.keys());\n\n        let file = files.value(\"file\");\n        println!(\"Some {:?}\", file.is_some());\n        response.html(Status::Ok, \"Upload success\".to_string()).send();\n        return;\n    }\n\n    response.html(Status::BadRequest, \"Upload failed\".to_string()).send();\n}\n</code></pre>"},{"location":"#handling-form-data","title":"Handling form data","text":"<p>Rusty Web supports <code>multipart/form-data</code> and <code>application/x-www-form-urlencoded</code> by default. You can use to <code>request.form_data()</code> to access field values.</p> <pre><code>fn save_data(mut request: Request, mut response: Response) {\n    if request.method == \"POST\" {\n        let form_data = request.form_data();\n        println!(\"Fields {:?}\", form_data.keys());\n\n        let username = form_data.value(\"username\");\n        println!(\"{:?}\", username);\n\n        response.html(Status::Ok, \"Form success\".to_string()).send();\n        return;\n    }\n\n    response.html(Status::BadRequest, \"Form failed\".to_string()).send();\n}\n</code></pre> <p>You can also use <code>request.form_data()</code> and <code>request.files()</code> together.</p>"},{"location":"#advanced-usage","title":"Advanced Usage","text":"<p>In Rusty Web, you have full control over the socket stream. You can stream the response however you like.</p> <p>Go to advanced usage tutorial</p>"},{"location":"advanced/","title":"Advanced Usage","text":"<p>In Rusty Web, you have full control over the socket stream. You can stream the response however you like.</p>"},{"location":"advanced/#request","title":"Request","text":"<p>You can access the common variables from request struct.</p> <ul> <li>request.query_params - It is a key values pair of query parameters. Type: <code>HashMap&lt;String, Vec&lt;String&gt;&gt;</code>.</li> <li>request.headers - It is a key values pair of request headers. <code>HashMap&lt;String, Vec&lt;String&gt;&gt;</code></li> <li>request.stream - The socket TcpStream for sending/receiving data.</li> <li>request.context - This will contain the information about how to handle the further request.</li> <li>request.pathname - Current pathname of the request.</li> <li>request.raw_path - Full path of the request including query params.</li> <li>request.partial_body - This is incomplete body bytes. Use this, if you are trying to implement custom response.</li> </ul>"},{"location":"advanced/#response","title":"Response","text":"<p>You can stream the HTTP response manually if you want.</p> <ul> <li>response.request - The request object is itself available in the response.</li> </ul>"},{"location":"advanced/#extracting-request-body","title":"Extracting request body","text":"<p>To access raw request body, you can use <code>request.body()</code> method. For this <code>Content-Length</code> header must be specified in the request.</p>"},{"location":"default-limits/","title":"Default Limits","text":""},{"location":"default-limits/#default-limits","title":"Default Limits","text":"<p>When you call <code>request.files()</code>, <code>request.form_data()</code> or <code>request.body()</code>, Rusty Web automatically sets the maximum allowed size.</p> <ul> <li>Request header: 1 MiB</li> <li>Multipart (multipart/form-data)<ul> <li>Overall maximum body: 512 MiB</li> <li>Form Part header: 1 MiB</li> <li>Form part file size: None</li> <li>Form part value: 1 MiB</li> </ul> </li> <li>application/x-www-form-urlencoded<ul> <li>Overall maximum body: 2 MiB</li> </ul> </li> <li>Raw Body: 512 MiB</li> </ul>"}]}